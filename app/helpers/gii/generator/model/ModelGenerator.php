<?php
/**
 * Created by PhpStorm.
 * User: zvinger
 * Date: 20.12.17
 * Time: 18:42
 */

namespace Zvinger\BaseClasses\app\helpers\gii\generator\model;

use yii\gii\CodeFile;
use yii\gii\generators\model\Generator;

class ModelGenerator extends Generator
{
    public $tablesNamespaces = [];

    public $templates = [];

    public $usableClass = null;

    public function init()
    {
//        $this->templates['default'] = \Yii::getAlias("@yii/gii/generators/model/default");
        $this->generateRelations = 'none';
        parent::init();
    }

    public function formView()
    {
        return \Yii::getAlias("@yii/gii/generators/model/form.php");
    }

    /**
     * @return CodeFile[]
     */
    public function generate()
    {
        if ($this->modelClass && strpos($this->modelClass, 'DB') !== 0) {
            $this->usableClass = $this->modelClass;
            $this->modelClass = 'DB'.$this->usableClass;
        }
        $files = parent::generate();

        if ($this->usableClass) {
            $queryClassName = $this->usableClass.'Query';
            $params = [];
            $params['className'] = $this->usableClass;
            $params['namespace'] = $this->ns;
            $params['queryClassName'] = $queryClassName;
            $codeFile = new CodeFile(
                \Yii::getAlias('@'.str_replace('\\', '/', $this->ns)).'/'.$this->usableClass.'.php',
                $this->render('use_model.php', $params)
            );
            if ($codeFile->operation === $codeFile::OP_OVERWRITE) {
                $codeFile->operation = $codeFile::OP_SKIP;
            }
            $files[] = $codeFile;
            $params['className'] = $queryClassName;
            $params['modelClassName'] = $this->usableClass;
            $this->queryNs = $this->ns;
            $files[] = new CodeFile(
                \Yii::getAlias('@'.str_replace('\\', '/', $this->ns)).'/'.$queryClassName.'.php',
                $this->render('query.php', $params)
            );

        }

        return $files;
    }


    protected function generateClassName($tableName, $useSchemaName = null)
    {
        if (!empty($this->tablesNamespaces[$tableName])) {
            if ($this->tableName !== $tableName) {
                return '\\'.$this->tablesNamespaces[$tableName];
            }
        }

        return parent::generateClassName($tableName, $useSchemaName); // TODO: Change the autogenerated stub
    }
}
